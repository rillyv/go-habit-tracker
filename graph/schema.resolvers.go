package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"

	"github.com/rillyv/habit-tracker/db"
	"github.com/rillyv/habit-tracker/graph/model"
)

// CreateHabit is the resolver for the createHabit field.
func (r *mutationResolver) CreateHabit(ctx context.Context, input model.CreateHabitInput) (*model.Habit, error) {
	habit, err := db.InsertHabit(input)

	if err != nil {
		return nil, err
	}

	return habit, nil
}

// UpdateHabit is the resolver for the updateHabit field.
func (r *mutationResolver) UpdateHabit(ctx context.Context, input model.UpdateHabitInput) (*model.Habit, error) {
	habit, err := db.UpdateHabit(input)

	if err != nil {
		return nil, err
	}

	return habit, nil
}

// DeleteHabit is the resolver for the deleteHabit field.
func (r *mutationResolver) DeleteHabit(ctx context.Context, input model.DeleteHabitInput) (*model.Habit, error) {
	habit, err := db.DeleteHabit(input)

	if err != nil {
		return nil, err
	}

	return habit, nil
}

// Habit is the resolver for the habit field.
func (r *queryResolver) Habit(ctx context.Context, id string) (*model.Habit, error) {
	habit, err := db.GetHabitByID(id)

	if err != nil {
		return nil, err
	}

	return habit, err
}

// Habits is the resolver for the habits field.
func (r *queryResolver) Habits(ctx context.Context) ([]*model.Habit, error) {
	return db.ListHabits()
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
